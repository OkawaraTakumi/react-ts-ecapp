import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState} from '../../../app/store';
import { db } from '../../../firebase';
import { orderInfo } from '../Type/orderHistoryType'; 

export interface OrderHistorySliceType {
  orders:orderInfo[];
}

const initialState: OrderHistorySliceType = {
    orders:[]
};


//ログイン時にカートにデータが残っていたら取得する
export const fetchOrderInfo = createAsyncThunk<orderInfo[],string|null>(
    'CartSlice/fetchOrderInfo',
    async (uid) => {
        const orders:orderInfo[] = []
      console.log(uid,'フェッチがうごいてます');
      if(uid){
          const snapShot = await db.collection(`users/${uid}/orders`).get();
          let orderInfo:orderInfo = {}
          snapShot.forEach(doc => {
               if(doc.data().status !== 0) {
                orderInfo = doc.data();
                orderInfo.id = doc.id;
                orders.push(orderInfo)
            }
        }) 
        console.log(orders)
        return orders;
      } else {
          console.log(orders)
          return orders
      }
    }
  );



export const OrderHistorySlice = createSlice({
  name: 'orderHistorySlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateOder: (state, action) => {
      state.orders = action.payload
    },
    unsetOrder:(state) => {
        state.orders= []
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOrderInfo.fulfilled, (state, action) => {
        state.orders = action.payload
      })
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export const { updateOder } = OrderHistorySlice.actions;
export const { unsetOrder } = OrderHistorySlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCartInfoBox = (state: RootState) => state.orderHistorySlice.orders;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default OrderHistorySlice.reducer;
