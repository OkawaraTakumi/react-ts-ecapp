import {createSlice} from '@reduxjs/toolkit';
import { PayloadAction } from '@reduxjs/toolkit';

export interface userState {
  uid: string;
}

const initialState: userState= {
  uid: ''
};



export const appSlice = createSlice({
  name: 'setuser',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    user: (state, action:PayloadAction<userState>) => {
      state.uid = action.payload.uid
    }
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { user } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const uid = (state: RootState) => state.setuser.uid;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default appSlice.reducer;