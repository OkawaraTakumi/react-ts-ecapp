import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState} from '../../app/store';
import { ItemdataObj, Toppingdataobj } from './commonType'
import { db } from '../../firebase';

export interface CommonSliceType {
  itemData:ItemdataObj[];
  toppingData:Toppingdataobj[];
}

const initialState: CommonSliceType = {
  itemData:[],
  toppingData:[]
};

export const fetchItemData = createAsyncThunk(
    'commonSlice/fetchItemData',
    async () => {
      const snapShot = await db.collection(`admin/N3U5oAuIyyGGEobo0L6G/item`).get();
      let itemData:ItemdataObj[] = []
      snapShot.forEach(doc => {
           itemData = doc.data().itemData
      }) 
      // The value we return becomes the `fulfilled` action payload
      return  itemData;
    }
  );

  export const fetchToppingData = createAsyncThunk(
    'commonSlice/fetchToppingData',
    async () => {
      const snapShot = await db.collection(`admin/N3U5oAuIyyGGEobo0L6G/topping`).get();
      let toppingData:Toppingdataobj[] = []
      snapShot.forEach(doc => {
           toppingData = doc.data().toppingData
      }) 
      console.log('動いてます')
      // The value we return becomes the `fulfilled` action payload
      return  toppingData;
    }
  );


export const CommonSlice = createSlice({
  name: 'commonSlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchItemData.fulfilled, (state, action) => {
        console.log('extraReducersが呼ばれています')
        state.itemData = action.payload;
      })
    //   .addCase(fetchItemData.fulfilled,(state, action) => {
    //     console.log('toppingを取得')
    //     state.toppingData = action.payload;
    // })
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItemData = (state: RootState) => state.commonSlice.itemData;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default CommonSlice.reducer;
